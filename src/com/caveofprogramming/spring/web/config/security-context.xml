<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-4.0.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

	<security:authentication-manager>
		<security:authentication-provider>
			<security:user-service>
				<!-- authorities are roles like admin, user, etc -->
				<security:user name="John" authorities="admin" password="letmein"/>
				<security:user name="Zog" authorities="admin" password="iamzog"/>
			</security:user-service>
		</security:authentication-provider>
		<security:authentication-provider>
			<!-- name of the data source in the dao-context.xml where it says id -->
			<!-- You can add custom queries for Authorities and Usernames by providing the needed queries in attributes "authorities by username query" and "users by username query" -->
			<!-- If you need specific columns you can rewrite the SQL query to be similar to SELECT name_user FROM name_user_table AS username if your tables are whacked -->
			<security:jdbc-user-service id="jdbcUserService" data-source-ref="dataSource" authorities-by-username-query="SELECT username, authority FROM authorities WHERE BINARY username = ?" users-by-username-query="SELECT username, password, enabled FROM users WHERE BINARY username = ?"/>
		</security:authentication-provider>
	</security:authentication-manager>
	
	<!-- Which parts of the website are under security control. Use-expressions to true because we're gonna use expressions like deny-all or permit-all or is-authenticated to specify how URL pattern should be handled -->
	<security:http use-expressions="true">
		<!-- Spring will automatically work down this list of authentication -->
		<!-- The ADMIN must be in capital. Spring will find the right role in the db provided you use the spring specified schema. -->
		<!-- In the DB you need to use the authorities table with a role column mapped to usernames with role names starting with "ROLE_"... -->
		<security:intercept-url pattern="/admin" access="permitAll"/>
		<!-- security:intercept-url pattern="/admin" access="hasRole('ROLE_ADMIN')"/ -->
		<security:intercept-url pattern="/createOffer" access="isAuthenticated()"/>
		<security:intercept-url pattern="/doCreate" access="isAuthenticated()" />
		<security:intercept-url pattern="/offerCreated" access="isAuthenticated()"/>
		<security:intercept-url pattern="/denied" access="permitAll"/>
		<security:intercept-url pattern="/loggedout" access="permitAll"/>
		<security:intercept-url pattern="/createaccount" access="permitAll"/>
		<security:intercept-url pattern="/newaccount" access="permitAll"/>
		<security:intercept-url pattern="/accountCreated" access="permitAll"/>
		<security:intercept-url pattern="/" access="permitAll"/>
		<security:intercept-url pattern="/static/**" access="permitAll"/>
		<security:intercept-url pattern="/login" access="permitAll"/>
		<security:intercept-url pattern="/offers" access="permitAll"/>
		<!-- By default, we're barring all users from everything -->
		<security:intercept-url pattern="/**" access="denyAll"/>
		<security:form-login login-page="/login" authentication-failure-url="/login?error=true"/>
		<!-- Spring will forward to this url when spring has successfully logged out the session -->
		<security:logout logout-success-url="/loggedout"/>
		<security:access-denied-handler error-page="/denied"/>
		<security:remember-me key="offersAppKey" user-service-ref="jdbcUserService"/>
	</security:http>

	<!-- This enabled annotation based security so that you can check roles even in methods and not just for URLs-->
	<!-- Caveate to this is that all roles must now start with "ROLE_". You could create a role voter bean and change the Role Voter to look for something else but this is easier -->
	<security:global-method-security secured-annotations="enabled"></security:global-method-security>
</beans>
